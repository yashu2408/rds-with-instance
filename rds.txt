AWSTemplateFormatVersion: '2010-09-09'
Description: EC2 + RDS (MySQL 8.0.41) in same VPC & SG, with EC2 UserData pointing to RDS endpoint

Parameters:
  KeyPairName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: Name of an existing EC2 KeyPair to SSH
    Default: oregon-test

Resources:

  # VPC
  MyVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: MyVPC

  # Internet Gateway
  MyInternetGateway:
    Type: AWS::EC2::InternetGateway

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref MyVPC
      InternetGatewayId: !Ref MyInternetGateway

  # Route Table
  MyRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyVPC

  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref MyRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref MyInternetGateway

  # Subnet 1 (AZ 0)
  MySubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Select [0, !GetAZs '']
      MapPublicIpOnLaunch: true

  # Subnet 2 (AZ 1)
  MySubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: !Select [1, !GetAZs '']
      MapPublicIpOnLaunch: true

  # Associate Subnets to Route Table
  SubnetRouteAssoc1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref MySubnet1
      RouteTableId: !Ref MyRouteTable

  SubnetRouteAssoc2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref MySubnet2
      RouteTableId: !Ref MyRouteTable

  # Security Group
  MySecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow SSH, HTTP, MySQL
      VpcId: !Ref MyVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 3000
          ToPort: 3000
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          CidrIp: 0.0.0.0/0

  # DB Subnet Group (required for RDS)
  MyDBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: "Subnet group for RDS"
      SubnetIds:
        - !Ref MySubnet1
        - !Ref MySubnet2

  # RDS Instance (MySQL 8.0.41)
  MyRDSInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      DBInstanceIdentifier: my-db-instance
      AllocatedStorage: 20
      DBInstanceClass: db.t3.micro
      Engine: mysql
      EngineVersion: 8.0.41
      MasterUsername: admin
      MasterUserPassword: admin%12345
      DBName: demo_1
      VPCSecurityGroups:
        - !GetAtt MySecurityGroup.GroupId
      DBSubnetGroupName: !Ref MyDBSubnetGroup
      PubliclyAccessible: true
      MultiAZ: false

  # EC2 Instance
  MyEC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t3.micro
      KeyName: !Ref KeyPairName
      ImageId: ami-04999cd8f2624f834
      SubnetId: !Ref MySubnet1
      SecurityGroupIds:
        - !Ref MySecurityGroup
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          exec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1
          echo "Installing Git"
          yum update -y
          yum install git -y
          echo "Installing NodeJS"
          touch .bashrc
          curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.34.0/install.sh | bash
          . /.nvm/nvm.sh
          nvm install --lts
          echo "Cloning website"
          mkdir -p /demo-website
          cd /demo-website
          git clone https://github.com/manjunath-start/dynamic-website-with-database.git .
          cd dynamic-website-with-database
          echo "Installing dependencies"
          npm install
          echo "Forwarding 80 -> 3000"
          iptables -t nat -A PREROUTING -p tcp --dport 80 -j REDIRECT --to-ports 3000
          echo "Installing & starting pm2"
          export DB_HOST=${MyRDSInstance.Endpoint.Address}
          export DB_USER=admin
          export DB_PASSWORD=admin%12345
          export DB_NAME=demo_1
          npm install pm2@latest -g
          pm2 start app.js

Outputs:
  EC2PublicIP:
    Description: Public IP of EC2 instance
    Value: !GetAtt MyEC2Instance.PublicIp

  RDSEndpoint:
    Description: RDS Endpoint
    Value: !GetAtt MyRDSInstance.Endpoint.Address
